package com.example.Trustifyrest;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.4.1.
 */
@SuppressWarnings("rawtypes")
public class ReviewHolder extends Contract {
    public static final String BINARY = "60806040523480156200001157600080fd5b5060405162001f3438038062001f348339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b611e0a806200012a6000396000f3fe608060405234801561001057600080fd5b50600436106100875760003560e01c8063932dd7b21161005b578063932dd7b21461013a578063bba27d911461016a578063e3a6e26d14610186578063fd687f4f146101a257610087565b80629d46d21461008c578063017c3fcc146100bc57806317943a1a146100da5780637929f9561461010a575b600080fd5b6100a660048036038101906100a19190611207565b6101d2565b6040516100b39190611386565b60405180910390f35b6100c4610440565b6040516100d19190611386565b60405180910390f35b6100f460048036038101906100ef9190611207565b6106ac565b60405161010191906113c4565b60405180910390f35b610124600480360381019061011f9190611207565b610745565b60405161013191906113fa565b60405180910390f35b610154600480360381019061014f9190611207565b6107ef565b604051610161919061145f565b60405180910390f35b610184600480360381019061017f91906115e2565b610951565b005b6101a0600480360381019061019b9190611687565b610d14565b005b6101bc60048036038101906101b79190611207565b610fa3565b6040516101c99190611785565b60405180910390f35b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050905060008167ffffffffffffffff81111561023a5761023961148b565b5b60405190808252806020026020018201604052801561026d57816020015b60608152602001906001900390816102585790505b50905060005b8281101561043557600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018381548110610313576103126117a7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461038690611805565b80601f01602080910402602001604051908101604052809291908181526020018280546103b290611805565b80156103ff5780601f106103d4576101008083540402835291602001916103ff565b820191906000526020600020905b8154815290600101906020018083116103e257829003601f168201915b5050505050828281518110610417576104166117a7565b5b6020026020010181905250808061042d90611865565b915050610273565b508092505050919050565b60606000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050905060008167ffffffffffffffff8111156104a8576104a761148b565b5b6040519080825280602002602001820160405280156104db57816020015b60608152602001906001900390816104c65790505b50905060005b828110156106a357600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018381548110610581576105806117a7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180546105f490611805565b80601f016020809104026020016040519081016040528092919081815260200182805461062090611805565b801561066d5780601f106106425761010080835404028352916020019161066d565b820191906000526020600020905b81548152906001019060200180831161065057829003601f168201915b5050505050828281518110610685576106846117a7565b5b6020026020010181905250808061069b90611865565b9150506104e1565b50809250505090565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff169050919050565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160019054906101000a900460ff16156107e557600190506107ea565b600090505b919050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461088090611805565b80601f01602080910402602001604051908101604052809291908181526020018280546108ac90611805565b80156108f95780601f106108ce576101008083540402835291602001916108f9565b820191906000526020600020905b8154815290600101906020018083116108dc57829003601f168201915b505050505090506000815103610947576040518060400160405280600981526020017f4e6f20726576696577000000000000000000000000000000000000000000000081525091505061094c565b809150505b919050565b61095a83610745565b610999576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109909061191f565b60405180910390fd5b60008160ff161180156109b0575060058160ff1611155b6109ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e6906119b1565b60405180910390fd5b600060405180606001604052808481526020018360ff16815260200160011515815250905080600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610aa99190611b7d565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908315150217905550905050600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610c269190611b7d565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908315150217905550905050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b808060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610d71929190611c5e565b602060405180830381865afa158015610d8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db29190611c9c565b1015610df3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dea90611d15565b60405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3385856040518463ffffffff1660e01b8152600401610e5093929190611d44565b6020604051808303816000875af1158015610e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e939190611da7565b506040518060600160405280604051806020016040528060008152508152602001600060ff16815260200160011515815250600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000820151816000019081610f599190611b7d565b5060208201518160010160006101000a81548160ff021916908360ff16021790555060408201518160010160016101000a81548160ff021916908315150217905550905050505050565b60606000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180549050905060008167ffffffffffffffff81111561100b5761100a61148b565b5b6040519080825280602002602001820160405280156110395781602001602082028036833780820191505090505b50905060005b8281101561118a57600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000600160008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000183815481106110df576110de6117a7565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010160009054906101000a900460ff1660ff1682828151811061116b5761116a6117a7565b5b602002602001018181525050808061118290611865565b91505061103f565b508092505050919050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006111d4826111a9565b9050919050565b6111e4816111c9565b81146111ef57600080fd5b50565b600081359050611201816111db565b92915050565b60006020828403121561121d5761121c61119f565b5b600061122b848285016111f2565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561129a57808201518184015260208101905061127f565b60008484015250505050565b6000601f19601f8301169050919050565b60006112c282611260565b6112cc818561126b565b93506112dc81856020860161127c565b6112e5816112a6565b840191505092915050565b60006112fc83836112b7565b905092915050565b6000602082019050919050565b600061131c82611234565b611326818561123f565b93508360208202850161133885611250565b8060005b85811015611374578484038952815161135585826112f0565b945061136083611304565b925060208a0199505060018101905061133c565b50829750879550505050505092915050565b600060208201905081810360008301526113a08184611311565b905092915050565b600060ff82169050919050565b6113be816113a8565b82525050565b60006020820190506113d960008301846113b5565b92915050565b60008115159050919050565b6113f4816113df565b82525050565b600060208201905061140f60008301846113eb565b92915050565b600082825260208201905092915050565b600061143182611260565b61143b8185611415565b935061144b81856020860161127c565b611454816112a6565b840191505092915050565b600060208201905081810360008301526114798184611426565b905092915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6114c3826112a6565b810181811067ffffffffffffffff821117156114e2576114e161148b565b5b80604052505050565b60006114f5611195565b905061150182826114ba565b919050565b600067ffffffffffffffff8211156115215761152061148b565b5b61152a826112a6565b9050602081019050919050565b82818337600083830152505050565b600061155961155484611506565b6114eb565b90508281526020810184848401111561157557611574611486565b5b611580848285611537565b509392505050565b600082601f83011261159d5761159c611481565b5b81356115ad848260208601611546565b91505092915050565b6115bf816113a8565b81146115ca57600080fd5b50565b6000813590506115dc816115b6565b92915050565b6000806000606084860312156115fb576115fa61119f565b5b6000611609868287016111f2565b935050602084013567ffffffffffffffff81111561162a576116296111a4565b5b61163686828701611588565b9250506040611647868287016115cd565b9150509250925092565b6000819050919050565b61166481611651565b811461166f57600080fd5b50565b6000813590506116818161165b565b92915050565b6000806040838503121561169e5761169d61119f565b5b60006116ac858286016111f2565b92505060206116bd85828601611672565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6116fc81611651565b82525050565b600061170e83836116f3565b60208301905092915050565b6000602082019050919050565b6000611732826116c7565b61173c81856116d2565b9350611747836116e3565b8060005b8381101561177857815161175f8882611702565b975061176a8361171a565b92505060018101905061174b565b5085935050505092915050565b6000602082019050818103600083015261179f8184611727565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061181d57607f821691505b6020821081036118305761182f6117d6565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061187082611651565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036118a2576118a1611836565b5b600182019050919050565b7f596f7520646f6e277420686176652061207472616e736c616374696f6e20667260008201527f6f6d20796f7572206164647265737320746f2074686973206164647265737300602082015250565b6000611909603f83611415565b9150611914826118ad565b604082019050919050565b60006020820190508181036000830152611938816118fc565b9050919050565b7f4572726f722c207374617273206d75737420626520612076616c75652062657460008201527f7765656e203020616e6420350000000000000000000000000000000000000000602082015250565b600061199b602c83611415565b91506119a68261193f565b604082019050919050565b600060208201905081810360008301526119ca8161198e565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302611a337fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826119f6565b611a3d86836119f6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000611a7a611a75611a7084611651565b611a55565b611651565b9050919050565b6000819050919050565b611a9483611a5f565b611aa8611aa082611a81565b848454611a03565b825550505050565b600090565b611abd611ab0565b611ac8818484611a8b565b505050565b5b81811015611aec57611ae1600082611ab5565b600181019050611ace565b5050565b601f821115611b3157611b02816119d1565b611b0b846119e6565b81016020851015611b1a578190505b611b2e611b26856119e6565b830182611acd565b50505b505050565b600082821c905092915050565b6000611b5460001984600802611b36565b1980831691505092915050565b6000611b6d8383611b43565b9150826002028217905092915050565b611b8682611260565b67ffffffffffffffff811115611b9f57611b9e61148b565b5b611ba98254611805565b611bb4828285611af0565b600060209050601f831160018114611be75760008415611bd5578287015190505b611bdf8582611b61565b865550611c47565b601f198416611bf5866119d1565b60005b82811015611c1d57848901518255600182019150602085019450602081019050611bf8565b86831015611c3a5784890151611c36601f891682611b43565b8355505b6001600288020188555050505b505050505050565b611c58816111c9565b82525050565b6000604082019050611c736000830185611c4f565b611c806020830184611c4f565b9392505050565b600081519050611c968161165b565b92915050565b600060208284031215611cb257611cb161119f565b5b6000611cc084828501611c87565b91505092915050565b7f4572726f72000000000000000000000000000000000000000000000000000000600082015250565b6000611cff600583611415565b9150611d0a82611cc9565b602082019050919050565b60006020820190508181036000830152611d2e81611cf2565b9050919050565b611d3e81611651565b82525050565b6000606082019050611d596000830186611c4f565b611d666020830185611c4f565b611d736040830184611d35565b949350505050565b611d84816113df565b8114611d8f57600080fd5b50565b600081519050611da181611d7b565b92915050565b600060208284031215611dbd57611dbc61119f565b5b6000611dcb84828501611d92565b9150509291505056fea264697066735822122011efd68109d7ce89457750ce78c65b355b0e6640cef9fd75cb8d5d55faa17a7964736f6c63430008110033";

    public static final String FUNC_CHECKTRANSACTION = "CheckTransaction";

    public static final String FUNC_DEPOSITTOKENS = "DepositTokens";

    public static final String FUNC_GETALLCOMPANYREVIEW = "GetAllCompanyReview";

    public static final String FUNC_GETALLMYREVIEW = "GetAllMyReview";

    public static final String FUNC_GETAVERAGESTARS = "GetAverageStars";

    public static final String FUNC_GETSPECIFICREVIEW = "GetSpecificReview";

    public static final String FUNC_GETSTARS = "GetStars";

    public static final String FUNC_WRITEAREVIEW = "WriteAReview";

    @Deprecated
    protected ReviewHolder(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected ReviewHolder(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected ReviewHolder(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected ReviewHolder(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<Boolean> CheckTransaction(String companyWalletAddress) {
        final Function function = new Function(FUNC_CHECKTRANSACTION, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, companyWalletAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> DepositTokens(String addressToDeposit, BigInteger _amount) {
        final Function function = new Function(
                FUNC_DEPOSITTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addressToDeposit), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<List> GetAllCompanyReview(String companyAddress) {
        final Function function = new Function(FUNC_GETALLCOMPANYREVIEW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, companyAddress)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> GetAllMyReview() {
        final Function function = new Function(FUNC_GETALLMYREVIEW, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> GetAverageStars(String addressReviewed) {
        final Function function = new Function(FUNC_GETAVERAGESTARS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addressReviewed)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<String> GetSpecificReview(String addressReviewed) {
        final Function function = new Function(FUNC_GETSPECIFICREVIEW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addressReviewed)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> GetStars(String addressReviewed) {
        final Function function = new Function(FUNC_GETSTARS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addressReviewed)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint8>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> WriteAReview(String addressToReview, String review, BigInteger stars) {
        final Function function = new Function(
                FUNC_WRITEAREVIEW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, addressToReview), 
                new org.web3j.abi.datatypes.Utf8String(review), 
                new org.web3j.abi.datatypes.generated.Uint8(stars)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    @Deprecated
    public static ReviewHolder load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new ReviewHolder(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static ReviewHolder load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new ReviewHolder(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static ReviewHolder load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new ReviewHolder(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static ReviewHolder load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new ReviewHolder(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<ReviewHolder> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String coinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, coinAddress)));
        return deployRemoteCall(ReviewHolder.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<ReviewHolder> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String coinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, coinAddress)));
        return deployRemoteCall(ReviewHolder.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ReviewHolder> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit, String coinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, coinAddress)));
        return deployRemoteCall(ReviewHolder.class, web3j, credentials, gasPrice, gasLimit, BINARY, encodedConstructor);
    }

    @Deprecated
    public static RemoteCall<ReviewHolder> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit, String coinAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, coinAddress)));
        return deployRemoteCall(ReviewHolder.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, encodedConstructor);
    }
}
